import pandas as pd
import numpy as np
import re

def format_borough(df, borough_col_name='borough'):
    """ Formats the borough column in the dataframe to remove unnecessary words and characters.

    Args:
        df (df): dataframe to be processed.
        borough_col_name (str, optional): borough column. Defaults to 'borough'.

    Returns:
        df: Same dataframe, with borough column updated.
    """

    unique_boroughs = df[borough_col_name].unique()

    replacements = {
    'London Borough of ': '',
    'Royal Borough of ': '',
    '(LA Code)': '',
    'Bromley Custodian Code': 'Bromley',
    'Council': '',
    #'Kingston': 'Kingston upon Thames',
    '&': 'and',
    'Custodian code': 'nan',
    'Out of Borough': 'Haringey',
    'And': 'and'
    }

    formatted_boroughs = {}
    for bor in unique_boroughs:
        if not isinstance(bor, str):
            bor = str(bor)
        new_bor = bor

        if new_bor == 'Kingston':
            new_bor = 'Kingston upon Thames'

        if new_bor == 'Richmond':
            new_bor = 'Richmond upon Thames'

        
        for old, new in replacements.items():
            new_bor = new_bor.replace(old, new)
        new_bor = new_bor.rstrip()
        formatted_boroughs[bor] = new_bor

    df[borough_col_name] = df[borough_col_name].map(formatted_boroughs)

    return df


def __format_dateime(df):
    """Formats the date columns in the dataframe to datetime format.

    Args:
        df (_type_): Dataframe to be processed.

    Returns:
        _type_: Processed dataframe.
    """

    for col in df.columns:
        if re.findall(r'_date', col):
            df[col] = pd.to_datetime(df[col], format='%d/%m/%Y', errors='coerce')

    return df


def format_df(df, drop_cols=True, borough_col_name='borough'):
    """Formats the dataframe by removing unnecessary words and characters from the column names, 
    formats the date columns and the borough column.

    Args:
        df (_type_): Dataframe to be processed.
        drop_cols (bool, optional): Option to drop columns generated by es search. Defaults to True.
        borough_col_name (str, optional): Name of borough column. Defaults to 'borough'.

    Returns:
        _type_: Processed dataframe.
    """

    new_cols = []
    for col in df.columns:
        n = col.replace('_source.', '')
        n = n.replace('application_details.', '')
        n = n.replace('residential_details.', '')
        new_cols.append(n)

    df.columns = new_cols

    df = __format_dateime(df)

    if borough_col_name in df.columns:
        df = format_borough(df, borough_col_name=borough_col_name)

    if drop_cols == True:
        drop_columns = ['_index', '_type', '_id', '_score', '_ignored']
        for col in drop_columns:
            if col in df.columns:
                df.drop(columns=[col], inplace=True)

    return df



